service: aws-sns-advanced

# WORKSHOP_START
# Define a `plugins` block and add `serverless-pseudo-parameters` to the plugins array. #
# WORKSHOP_END
# FINAL_START
plugins:
  - serverless-pseudo-parameters
# FINAL_END

# WORKSHOP_START
# Step 4. In this_file, Define a `custom` block and add `topicName` and `topicArn`. We will use this reference in other areas of `serverless.yml`. http://bit.ly/2Dccix1 #
# WORKSHOP_END
# FINAL_START
custom:
  topicName: sns-advanced-topic-example
  # cloud formation intrinstic function to get ARN of topic.
  # `MyCustomTopic` references the cloudformation in `resources`
  topicArn:
    Fn::Join:
      - ''
      - - 'arn:aws:sns:'
        - Ref: AWS::Region
        - ":"
        - Ref: AWS::AccountId
        - ":"
        - Fn::GetAtt:
          - MyCustomTopic
          - TopicName
# FINAL_END

provider:
  name: aws
  runtime: nodejs12.x
  # WORKSHOP_START
  # Step 5. In this_file, expose the `TOPIC_NAME` to `environment` variables using the `${self:custom.topicName}` reference. This is for the eventProducer to send message to our newly created topic #
  # WORKSHOP_END
  # FINAL_START
  environment:
    TOPIC_NAME: ${self:custom.topicName}
  # FINAL_END
  # WORKSHOP_START
  # Step 6. In this_file, Create the IAM role `iamRoleStatements` needed to `sns:Publish`. This allows for our `eventProducer` function to publish messages to our SNS topic.
  # WORKSHOP_END
  # FINAL_START
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource: ${self:custom.topicArn}
  # FINAL_END

functions:
  eventProducer:
    handler: handler.eventProducer
    events:
      - http:
          path: trigger
          method: get
          cors: true

  eventConsumer:
    handler: handler.eventConsumer
    # WORKSHOP_START
    # Step 7. In this_file, attach the `sns` event to the `eventConsumer` function. Use the full topic ARN to subscribe to the already created topic. See http://bit.ly/2Dccix1 for more info on sns event
    # WORKSHOP_END
    # FINAL_START
    events:
      - sns: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.topicName}
    # FINAL_END

resources:
# WORKSHOP_START
# Step 3. In this_file, define a `resources` block and add the CloudFormation to create a new SNS topic. See `readme.md` for SNS CloudFormation template #
# WORKSHOP_END
# FINAL_START
  Resources:
    # This creates a new sns topic.
    MyCustomTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "Second stand alone topic created via CloudFormation"
        TopicName: ${self:custom.topicName}
# FINAL_END
