# Serverless service with kinesis stream resource & batch processing function
service: kinesis-basic-example

# WORKSHOP_START
# Step 3. In this_file, define a `custom` block and setup a `stage` value using serverless variable syntax. Set the default stage as 'dev' with CLI options flag to overide it. `${opt:stage, 'dev'}` #

# Step 4. In this_file, inside the `custom` block define a `streamName` value and post fix the variable with the custom stage value. Example: `my-kinesis-stream-${self:custom.stage}` #
# WORKSHOP_END
# FINAL_START
custom:
  stage: ${opt:stage, 'dev'}
  streamName: my-kinesis-stream-${self:custom.stage}
# FINAL_END

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage}

# WORKSHOP_START
# Step 6. In this_file, make a new `function` block and connect to the `processEvents` function. The function `events` will be trigged by the kinesis `arn`. http://bit.ly/2htzI8r #
# WORKSHOP_END
# FINAL_START
# `processEvents` is trigged by the kinesis stream
functions:
  processEvents:
    handler: handler.processEvents
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - MyKinesisStream # CloudFormation reference defined below
              - Arn
# FINAL_END

# WORKSHOP_START
# 2. Define the kinesis stream cloud formation in the `resources` section #
# WORKSHOP_END
# FINAL_START
# Here we define the kinesis stream and set the name & ShardCount
resources:
  Resources:
    # Stream
    MyKinesisStream:
      Type: AWS::Kinesis::Stream
      Properties:
        # WORKSHOP_START
        # Step 5. In this_file, reference the newly created `custom.streamName` value as the `Name` property of the kinesis stream `resource` definition #
        # WORKSHOP_END
        Name: ${self:custom.streamName}
        ShardCount: 1
# FINAL_END
