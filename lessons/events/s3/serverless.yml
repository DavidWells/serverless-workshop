
service: aws-s3-event-example

# Step 2. In this_file, Define a `custom` block and add `bucketName` & `outputBucketName` values. Make it globally unique. We will use this reference in other areas of serverless.yml #
# Step 3. In this_file, add an `outputBucketName` to the `custom` block. Use serverless variables to reference the orignal bucket name and postfix it with `-ouput` `${self:custom.bucketName}-output` #

provider:
  name: aws
  runtime: nodejs22.x
  # Step 4. In this_file, Expose the `bucketName` to `environment` variables #
  # Step 5. In this_file, Create the IAM role `iamRoleStatements` needed to `s3:GetObject` & `s3:PutObject`
  # Narrow the scope of the permission to the two buckets in this service

functions:
  # save function will save urls to s3
  save:
    handler: save.saveImage
    events:
      - http:
          path: save-image
          method: post
          cors: true
  resize:
    handler: resize.resizeImage
  # Step 6. in this_file, attach the s3 event to the `resize` function and trigger when images are added to bucket. a.k.a the `ObjectCreated` s3 event. See the s3 event docs link http://bit.ly/2zyiRMB #

# Step 7. in this_file, add an additional bucket in `resources`. This bucket will be used for storing the resized images. This it to avoid an infinite loop while listening to the s3 events #
